resource "proxmox_virtual_environment_vm" "k8s_worker" {
  depends_on              = []
  count                   = var.k8s_worker_nodes
  name                    = "${var.vm_name_prefix}-worker-${count.index + 1}"
    description = "${var.vm_name_prefix}-worker-${count.index + 1}, generated by Terraform Alx v${var.module_version}"
  tags        = ["terraform", "ubuntu"]
  node_name             = var.proxmox_node_name
  clone                   = var.vm_template_name
  agent {
    # read 'Qemu guest agent' section, change to true only when ready
    enabled = false
  }
  stop_on_destroy = true
    startup {
    order      = "3"
    up_delay   = "60"
    down_delay = "60"
  }

  cpu {
    cores        = var.worker_node_cpu
    type         = "x86-64-v2-AES"  # recommended for modern CPUs
  }

  memory {
    dedicated = var.worker_node_memory
    floating  = var.worker_node_memory # set equal to dedicated to enable ballooning
  }
  disk {
    datastore_id = var.vm_cloudinit_storage
    file_id      = proxmox_virtual_environment_download_file.latest_ubuntu_22_noble_qcow2_img.id
    interface    = "scsi0"
    size =var.worker_node_disk
  }
  initialization {
    ip_config {
      ipv4 {
        address = "${var.ip_address_start}.${var.worker_node_ip_start + count.index}/${var.ip_address_cidr}"
        gateway = var.ip_address_gateway
      }
    }

    user_account {
      keys     = [trimspace(tls_private_key.ubuntu_vm_key.public_key_openssh)]
      password = random_password.ubuntu_vm_password.result
      username = "ubuntu"
    }

    user_data_file_id = proxmox_virtual_environment_file.cloud_config.id
  }
  network_device {
    bridge = var.proxmox_bridge_name
  }

  operating_system {
    type = "l26"
  }
    tpm_state {
    version = "v2.0"
  }

  serial_device {}
  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = var.vm_user
      private_key = var.ssh_private_key
      #host        = self.ssh_host
    }
    inline = [
      "until sudo apt-get update; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "sudo swapoff -a",
      "until sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common nfs-common; do echo 'apt-get install failed, retrying...'; sleep 5; done",
      "sudo mkdir -p -m 755 /etc/apt/keyrings",
      "sudo bash -c 'echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${var.k8s_version}/deb/ /\" > /etc/apt/sources.list.d/kubernetes.list'",
      "sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v${var.k8s_version}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg",
      "until sudo apt-get update -y; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "until sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y; do echo 'apt-get install failed, retrying...'; sleep 5; done",
      "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -",
      "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"",
      "until sudo apt-get update -y; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "until sudo apt-get install docker-ce docker-ce-cli containerd.io -y; do echo 'apt-get install docker failed, retrying...'; sleep 5; done",
      "until sudo apt-get install -y containerd.io; do echo 'apt-get install containerd.io failed, retrying...'; sleep 5; done",
      "until sudo apt-get install -y kubelet kubeadm kubectl; do echo 'apt-get install kubelet kubeadm kubectl failed, retrying...'; sleep 5; done",
      "sudo apt-mark hold kubelet kubeadm kubectl",
      "sudo systemctl enable docker",
      "sudo systemctl start docker",
      "sudo modprobe br_netfilter",
      "sudo rm /etc/containerd/config.toml",
      "sudo systemctl restart containerd",
      "sudo bash -c 'echo \"1\" > /proc/sys/net/ipv4/ip_forward'",

      "sudo bash -c 'echo -e \"${var.ssh_private_key}\" > /home/${var.vm_user}/.ssh/id_rsa'",
      "sudo chmod 600 /home/${var.vm_user}/.ssh/id_rsa",
      "sudo chown ${var.vm_user}:${var.vm_user} /home/${var.vm_user}/.ssh/id_rsa",
      "eval $(ssh-agent -s)",
      "ssh-add /home/${var.vm_user}/.ssh/id_rsa",

      // Join the master nodes
      "scp -o StrictHostKeyChecking=no ${var.vm_user}@${var.ip_address_start}.${var.load_balancer_ip}:/home/${var.vm_user}/tools/cluster/workerJoin.sh /tmp/workerJoin.sh",
      "sudo chmod +x /tmp/workerJoin.sh",
      "sudo bash /tmp/workerJoin.sh"
    ]
  }
  // TODO: On destroy, remove the master node from the Kubernetes cluster
}
resource "proxmox_virtual_environment_download_file" "latest_ubuntu_22_noble_qcow2_img" {
  content_type = "iso"
  datastore_id = "local"
  node_name    = "proxmon"
  url          = "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
}
resource "random_password" "ubuntu_vm_password" {
  length           = 16
  override_special = "_%@"
  special          = true
}

resource "tls_private_key" "ubuntu_vm_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}
output "ubuntu_vm_password" {
  value     = random_password.ubuntu_vm_password.result
  sensitive = true
}

output "ubuntu_vm_private_key" {
  value     = tls_private_key.ubuntu_vm_key.private_key_pem
  sensitive = true
}

output "ubuntu_vm_public_key" {
  value = tls_private_key.ubuntu_vm_key.public_key_openssh
}

resource "proxmox_virtual_environment_file" "cloud_config" {
  content_type = "snippets"
  datastore_id = "local"
  node_name    = "proxmon"

  source_raw {
    data = <<-EOF
    #cloud-config
    chpasswd:
      list: |
        ubuntu:example
      expire: false
    hostname: gitlab-1
    packages:
      - qemu-guest-agent
    users:
      - default
      - name: ubuntu
        groups: sudo
        shell: /bin/bash
        ssh-authorized-keys:
          - ${trimspace(tls_private_key.ubuntu_vm_key.public_key_openssh)}
        sudo: ALL=(ALL) NOPASSWD:ALL
    EOF

    file_name = "ubuntu.cloud-config.yaml"
  }
}



